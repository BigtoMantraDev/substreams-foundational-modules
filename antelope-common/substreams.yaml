specVersion: v0.1.0
package:
  name: antelope_common
  version: v0.3.0
  url: https://github.com/streamingfast/substreams-foundational-modules/antelope-common
  doc: |
    common Antelope substreams modules to extract transactions with indexing

    Use one of those optimized modules with a query string as a parameter:
    * filtered_transactions

    The query string will be used for the blockfilter as well as the actual filtering of the transactions

protobuf:
  files:
    - sf/substreams/antelope/v1/transaction.proto
    - sf/substreams/antelope/v1/action.proto
  importPaths:
    - ./proto

imports:
  antelope: https://github.com/pinax-network/firehose-antelope/releases/download/v0.0.5/antelope-v0.0.5.spkg

binaries:
  default:
    type: wasm/rust-v1
    file: ./target/wasm32-unknown-unknown/release/substreams.wasm

modules:
  - name: index_actions
    kind: blockIndex
    inputs:
      - source: sf.antelope.type.v1.Block
    output:
      type: proto:sf.substreams.index.v1.Keys
    doc: |
      `index_actions` sets the following keys on the block:
       * Authorized by      auth:{account}[@{permission}]
       * Receiver           recv:{account}
       * Contract account   code:{account}
       * Action             action:{action}


  - name: all_transactions
    kind: map
    inputs:
      - source: sf.antelope.type.v1.Block
    output:
      type: proto:sf.substreams.antelope.v1.Transactions
    doc: |
      `all_transactions` reads from antelope blocks and extracts all executed transactions

  - name: all_actions
    kind: map
    inputs:
      - map: all_transactions
    output:
      type: proto:sf.substreams.antelope.v1.Actions
    doc: |
      `all_actions` reads from all_transactions and extracts all executed actions

  - name: filtered_transactions
    kind: map
    blockFilter:
      module: index_actions
      query:
        params: true
    inputs:
      - params: string
      - map: all_transactions
    output:
      type: proto:sf.substreams.antelope.v1.Transactions
    doc: |
      `filtered_transactions` reads from all_transactions and applies a filter on the transactions
      Supported operators are: logical or `||`, logical and `&&` and parenthesis: `()`
      Example: `auth:hackerdarwin && code:eosio.token`

  - name: filtered_actions
    kind: map
    blockFilter:
      module: index_actions
      query:
        params: true
    inputs:
      - params: string
      - map: all_actions
    output:
      type: proto:sf.substreams.antelope.v1.Actions
    doc: |
      `filtered_actions` reads from all_actions and applies a filter on the actions
      Supported operators are: logical or `||`, logical and `&&` and parenthesis: `()`
      Example: `auth:hackerdarwin && code:eosio.token`

params:
  # filtered_transactions: "recv:hackerdarwin && code:eosio.token"
  filtered_transactions: "code:stats.sx && action:tradelog"
  filtered_actions: "code:stats.sx && action:tradelog"
