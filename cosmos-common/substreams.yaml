# requires substreams v1.7.1 and above
specVersion: v0.1.0
package:
  name: cosmos_common
  version: v0.1.0
  url: https://github.com/streamingfast/substreams-foundational-modules/cosmos-common
  doc: |
    Common Cosmos Substreams modules to extract events and transactions with indexing

    Use one of those optimized modules with a query string as a parameter:
    * filtered_events
    * filtered_event_groups

    The query string will be used for the blockfilter as well as the actual filtering of the events/transactions

    The following modules are also available for more specific filtering, but they do not use an index by default:
    * filtered_events_by_attribute_value
    * filtered_event_groups_by_attribute_value

    They should be overriden by setting the blockFilter.Query.String parameter to a query that matches the event type 
    and attribute keys only. See `derived-substreams-example.yaml` for an example 
    (https://github.com/streamingfast/substreams-foundational-modules/cosmos-common)

network: mantra-mainnet

protobuf:
  descriptorSets:
  - localPath: generated-buf-build.binpb
  excludePaths:
    - sf/substreams
    - google

binaries:
  default:
    type: wasm/rust-v1
    file: target/wasm32-unknown-unknown/release/cosmos_common.wasm

modules:
  - name: filtered_trx_by_events
    kind: map
    initialBlock: 589869
    inputs:
      - params: string
      - map: all_transactions
    blockFilter:
      module: index_events
      query:
        params: true
    output:
      type: proto:sf.substreams.cosmos.v1.TransactionList

  - name: filtered_trx_by_events_attribute_value
    kind: map
    initialBlock: 589869
    inputs:
      - params: string
      - map: all_events
      - map: all_transactions
    blockFilter:
      module: index_events
      query:
        string: type:transfer && attr:recipient
    output:
      type: proto:sf.substreams.cosmos.v1.TransactionList

  - name: all_transactions
    kind: map
    initialBlock: 589869
    inputs:
      - source: sf.cosmos.type.v2.Block
    output:
      type: proto:sf.substreams.cosmos.v1.TransactionList

  - name: all_events
    kind: map
    initialBlock: 0
    inputs:
      - source: sf.cosmos.type.v2.Block
    output:
      type: proto:sf.substreams.cosmos.v1.EventList
    doc: |
      `all_events` reads from the `sf.cosmos.type.v2.Block` source and outputs a list of all events in the block.
      Some events are at the block level, others appear inside the transactions.

  - name: index_events
    kind: blockIndex
    inputs:
      - map: all_events
    output:
      type: proto:sf.substreams.index.v1.Keys
  
  - name: filtered_events
    kind: map
    blockFilter:
      module: index_events
      query:
        params: true
    inputs:
      - params: string
      - map: all_events
    output:
      type: proto:sf.substreams.cosmos.v1.EventList
    
  - name: filtered_event_groups
    kind: map
    blockFilter:
      module: index_events
      query:
        params: true
    inputs:
      - params: string
      - map: all_events
    output:
      type: proto:sf.substreams.cosmos.v1.EventList
    
  - name: filtered_events_by_attribute_value
    kind: map
    inputs:
      - params: string
      - map: all_events
    output:
      type: proto:sf.substreams.cosmos.v1.EventList
    
  - name: filtered_event_groups_by_attribute_value
    kind: map
    inputs:
      - params: string
      - map: all_events
    output:
      type: proto:sf.substreams.cosmos.v1.EventList

params:
  filtered_events: "(type:message && attr:action) || (type:wasm && attr:_contract_address)"
  filtered_event_groups: "type:wasm && attr:_contract_address"
  filtered_events_by_attribute_value: "type:wasm && attr:_contract_address:inj1v77y5ttah96dc9qkcpc88ad7rce8n88e99t3m5"
  filtered_event_groups_by_attribute_value: "type:wasm && attr:_contract_address:inj1v77y5ttah96dc9qkcpc88ad7rce8n88e99t3m5"
  filtered_trx_by_events: "type:transfer && attr:recipient"
  filtered_trx_by_events_attribute_value: "type:transfer && attr:recipient:mantra13pxn9n3qw79e03844rdadagmg0nshmwf4txc8r"

